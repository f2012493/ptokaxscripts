FreshStuff={Commands={},Levels={},AllStuff = {},NewestStuff = {},TopAdders={}} -- do not touch this line
--[[
FreshStuff module for LawMaker by bastya_elvtars
Based on FreshStuff 3.4.2 which was originally written by plop and taken over by me :)
I left the possibility for custom commands here (why truncate?)
2005. 07. 13.
]]

Run(path.."cfg/freshstuff.ini")

FreshStuff.Timer=0

function FreshStuff.Main() 
  if loadfile("lawmaker/components/metafiles/fresh_categories.dat") then
    dofile("lawmaker/components/metafiles/fresh_categories.dat")
  else
      FreshStuff.Types={
	      ["warez"]="Warez",
	      ["game"]="Games",
	      ["music"]="Music",
	      ["movie"]="Movies",
	    }
    local f=io.open("lawmaker/components/metafiles/fresh_categories.dat","w+")
    f:write(
  [[FreshStuff.Types=
  {
    ["warez"]="Warez",
    ["game"]="Games",
    ["music"]="Music",
    ["movie"]="Movies",
  }]])
    f:close()
  end
  for a,b in FreshStuff.Types do
    RegRC(FreshStuff.Levels.Add,"1 3","Releases\\Add an item to the\\"..b,"!"..FreshStuff.Commands.Add.." "..a.." %[line:Name:]")
    RegRC(FreshStuff.Levels.Show,"1 3","Releases\\Show items of type\\"..b,"!"..FreshStuff.Commands.Show.." "..a)
  end
  FreshStuff.ReloadRel()
end

function FreshStuff.NewUserConnected(user)
  if FreshStuff.ShowOnEntry ~=0 then
    if FreshStuff.ShowOnEntry==1 then
      SendTxt(user,"PM",Bot.name, FreshStuff.MsgNew)
    else
      SendTxt(user,"MAIN",Bot.name, FreshStuff.MsgNew)
    end
  end
end

function FreshStuff.ShowCrap(user,data,env)
  local _,_,cat= string.find(data, "%b<>%s+%S+%s+(%S+)")
  if not cat then
    user:SendPM(Bot.name, FreshStuff.MsgAll)
  else
    if cat == "new" then
      user:SendPM(Bot.name, FreshStuff.MsgNew)
    elseif FreshStuff.Types[cat] then
      user:SendPM(Bot.name, FreshStuff.ShowRelType(cat))
    else
      SendTxt(user,env,Bot.name,"No such type.")
    end
  end
end

function FreshStuff.AddCrap (user,data,env)
  local _,_,cat,tune= string.find(data, "%b<>%s+%S+%s+(%S+)%s+(.+)")
  if cat then
    if FreshStuff.Types[cat] then
      if string.find(tune,"$",1,true) then SendTxt(user,env,Bot.name, "The release name must NOT contain dollar sign ($)!") return 1 end
      for i=1, FreshStuff.Count do
        local ct,who,when,title=unpack(FreshStuff.AllStuff[i])
        if title==tune then SendTxt(user,env,Bot.name, "The release is already added under category "..FreshStuff.Types[ct]..".") return 1 end
      end
      SendTxt(user,env,Bot.name, tune.." is added to the releases as "..cat)
      SendToAll(Bot.name, user.sName.." added to the "..cat.." releases: "..tune)
      FreshStuff.Count = FreshStuff.Count + 1
      FreshStuff.AllStuff[FreshStuff.Count]={cat,user.sName,os.date("%m/%d/%Y"),tune}
      FreshStuff.SaveRel()
      FreshStuff.ReloadRel()
    else 
      SendTxt(user,env,Bot.name, "Unknown category: "..cat)
    end
  else
    SendTxt(user,env,Bot.name, "yea right, like i know what you got 2 add when you don't tell me!")
  end
end

function FreshStuff.OpenRel()
  FreshStuff.AllStuff,FreshStuff.NewestStuff = nil,nil
  collectgarbage(); io.flush()
  FreshStuff.AllStuff,FreshStuff.NewestStuff = {},{}
  FreshStuff.Count,FreshStuff.Count2 = 0,0
  local f=io.open("lawmaker/components/metafiles/freshstuff.dat","r")
  if f then
    for line in f:lines() do
      local _,_,cat,who,when,title=string.find(line, "(.+)$(.+)$(.+)$(.+)")
      if cat then
	if not FreshStuff.TopAdders[who] then FreshStuff.TopAdders[who]=1 else FreshStuff.TopAdders[who]=FreshStuff.TopAdders[who]+1 end
	if string.find(when,"%d+/%d+/0%d") then -- compatibility with old file format
	  local _,_,m,d,y=string.find(when,"(%d+)/(%d+)/(0%d)")
	  when=m.."/"..d.."/".."20"..y
	end
        FreshStuff.Count = FreshStuff.Count +1
	FreshStuff.AllStuff[FreshStuff.Count]={cat,who,when,title}
      else
	SendToOps(Bot.name, "Releases file is corrupt, failed to load all items.")
      end
    end
    f:close()
  end
  if FreshStuff.Count > FreshStuff.MaxNew then
    local tmp = FreshStuff.Count - FreshStuff.MaxNew + 1
    FreshStuff.Count2=FreshStuff.Count - FreshStuff.MaxNew + 1
    for i = tmp, FreshStuff.Count do
      FreshStuff.Count2=FreshStuff.Count2 + 1
      if FreshStuff.AllStuff[FreshStuff.Count2] then
	FreshStuff.NewestStuff[FreshStuff.Count2]=FreshStuff.AllStuff[FreshStuff.Count2]
      end
    end
  else
    for i=1, FreshStuff.Count do
      FreshStuff.Count2 = FreshStuff.Count2 + 1
      if FreshStuff.AllStuff[i] then
	FreshStuff.NewestStuff[FreshStuff.Count2]=FreshStuff.AllStuff[i]
      end
    end
  end
end

function FreshStuff.ShowRel(tab)
  local Msg = "\r\n"
  local cat,who,when,title
  local tmptbl={}
  if tab == FreshStuff.NewestStuff then
    if FreshStuff.Count2 == 0 then
      FreshStuff.MsgNew = "\r\n\r\n".." --------- The Latest Releases -------- \r\n\r\n  No releases on the list yet\r\n\r\n --------- The Latest Releases -------- \r\n\r\n"
    else
      for i=1, FreshStuff.Count2 do
	if FreshStuff.NewestStuff[i] then
	  cat,who,when,title=unpack(FreshStuff.NewestStuff[i])
	  if title then
	    if FreshStuff.Types[cat] then cat=FreshStuff.Types[cat] end
	    if not tmptbl[cat] then tmptbl[cat]={} end
	    table.insert(tmptbl[cat],Msg.."ID: "..i.."\t"..title.." // (Added by "..who.." at "..when..")")
	  end
	end
      end
    end
    for a,b in pairs (tmptbl) do
      Msg=Msg.."\r\n"..a.."\r\n"..string.rep("-",33).."\r\n"..table.concat(b).."\r\n"
    end      
    FreshStuff.MsgNew = "\r\n\r\n".." --------- The Latest "..FreshStuff.MaxNew.." Releases -------- "..Msg.."\r\n\ --------- The Latest "..FreshStuff.MaxNew.."  Releases -------- \r\n\r\n"
  else
    if FreshStuff.Count == 0 then
      FreshStuff.MsgAll = "\r\n\r\r\n".." --------- All The Releases -------- \r\n\r\n  No releases on the list yet\r\n\r\n --------- All The Releases -------- \r\n\r\n"
    else
      FreshStuff.MsgHelp  = "  use "..FreshStuff.Commands.Show.." <new>"
      for a,b in FreshStuff.Types do
	FreshStuff.MsgHelp  = FreshStuff.MsgHelp .."/"..a
      end
      FreshStuff.MsgHelp  = FreshStuff.MsgHelp .."> to see only the selected types"
      for i=1, FreshStuff.Count do
	if FreshStuff.AllStuff[i] then
	  cat,who,when,title=unpack(FreshStuff.AllStuff[i])
	  if title then
	    if FreshStuff.Types[cat] then cat=FreshStuff.Types[cat] end
	    if not tmptbl[cat] then tmptbl[cat]={} end
	    table.insert(tmptbl[cat],Msg.."ID: "..i.."\t"..title.." // (Added by "..who.." at "..when..")")
	  end
	end
      end
      for a,b in pairs (tmptbl) do
	Msg=Msg.."\r\n"..a.."\r\n"..string.rep("-",33).."\r\n"..table.concat(b).."\r\n"
      end      
      FreshStuff.MsgAll = "\r\n\r\r\n".." --------- All The Releases -------- "..Msg.."\r\n --------- All The Releases -------- \r\n"..FreshStuff.MsgHelp .."\r\n"
    end
  end
end

function FreshStuff.ShowRelType(what)
  local cat,who,when,title
  local Msg,MsgType,tmp = "\r\n",nil,0
  if FreshStuff.Count == 0 then
    MsgType = "\r\n\r\n".." --------- All The "..FreshStuff.Types[what].." -------- \r\n\r\n  No "..string.lower(FreshStuff.Types[what]).." yet\r\n\r\n --------- All The "..FreshStuff.Types[what].." -------- \r\n\r\n"
  else
    for i=1, FreshStuff.Count do
      cat,who,when,title=unpack(FreshStuff.AllStuff[i])
      if cat == what then
	tmp = tmp + 1
	Msg = Msg.."ID: "..i.."\t"..title.." // (Added by "..who.." at "..when..")\r\n"
      end
    end
    if tmp == 0 then
      MsgType = "\r\n\r\n".." --------- All The "..FreshStuff.Types[what].." -------- \r\n\r\n  No "..string.lower(FreshStuff.Types[what]).." yet\r\n\r\n --------- All The "..FreshStuff.Types[what].." -------- \r\n\r\n"
    else
      MsgType= "\r\n\r\n".." --------- All The "..FreshStuff.Types[what].." -------- \r\n"..Msg.."\r\n --------- All The "..FreshStuff.Types[what].." -------- \r\n\r\n"
    end
  end
  return MsgType
end

function FreshStuff.DelCrap(user, data,env)
  local _,_,what=string.find(data,"%b<>%s+%S+%s+(.+)")
  if what then
    local cnt,x=0,os.clock()
    local tmp={}
    for w in string.gfind(what,"(%d+)") do
      table.insert(tmp,tonumber(w))
    end
    table.sort(tmp)
    for k=table.getn(tmp),1,-1 do
      local n=tmp[k]
      if FreshStuff.AllStuff[n] then
	SendTxt(user,env,Bot.name, FreshStuff.AllStuff[n][4].." is deleted from the releases.")
	FreshStuff.AllStuff[n]=nil
	cnt=cnt+1
      else
	SendTxt(user,env,Bot.name, "release numbered "..wht.." wasn't found in the releases.")
      end
    end
    if cnt>0 then
      FreshStuff.SaveRel()
      FreshStuff.ReloadRel()
      SendTxt(user,env,Bot.name, "Deletion of "..cnt.." item(s) took "..os.clock()-x.." seconds.")
    end
  else
    SendTxt(user,env,Bot.name, "yea right, like i know what i got 2 delete when you don't tell me!.")
  end
end

function FreshStuff.SaveRel()
  local f= io.open("lawmaker/components/metafiles/freshstuff.dat","w+")
  for i=1,FreshStuff.Count do
    if FreshStuff.AllStuff[i] then
      f:write(table.concat(FreshStuff.AllStuff[i],"$").."\n")
    end
  end
  f:flush()
  f:close()
end

function FreshStuff.ReloadRel(user,data,env)
  local x=os.clock()
  FreshStuff.OpenRel()
  FreshStuff.ShowRel(FreshStuff.NewestStuff)
  FreshStuff.ShowRel(FreshStuff.AllStuff)
  if user then SendTxt(user,env,Bot.name,"Releases reloaded, took "..os.clock()-x.." seconds.") end
end

function FreshStuff.SearchRel(user,data,env)
  local _,_,what=string.find(data,"%b<>%s+%S+%s+(.+)")
  if what then
    local res,rest=0,{}
    local msg="\r\n---------- You searched for keyword \""..what.."\". The results: ----------\r\n\r\n"
    for a,b in FreshStuff.AllStuff do
      if string.find(string.lower(b[4]),string.lower(what),1,true) then
	table.insert(rest,{b[1],b[2],b[3],b[4]})
      end
    end
    if table.getn(rest)~=0 then
      for i=1,table.getn(rest) do
	local type,who,when,title=unpack(rest[i])
	res= res + 1
	msg = msg.."ID: "..i.."\t"..title.." // (Added by "..who.." at "..when..")\r\n"
      end
      msg=msg..string.rep("-",20).."\r\n"..res.." results."
    else
      msg=msg.."\r\nSearch string "..what.." was not found in releases database."
    end
    user:SendPM(Bot.name,msg)
  else
    SendTxt(user,env,Bot.name, "yea right, like i know what you got 2 search when you don't tell me!|")
  end
end

function FreshStuff.AddCatgry(user,data,env)
  local _,_,what1,what2=string.find(data,"%b<>%s+%S+%s+(%S+)%s+(.+)")
  if what1 then
    if string.find(what1,"$",1,true) then SendTxt(user,env,Bot.name, "The dollar sign is not allowed.") return 1 end
    if not FreshStuff.Types[what1] then
      FreshStuff.Types[what1]=what2
      FreshStuff.SaveCt()
      SendTxt(user,env,Bot.name,"The category "..what1.." has successfully been added.")
    else
      if FreshStuff.Types[what1]==what2 then
	SendTxt(user,env,Bot.name,"Already having the type "..what1)
      else
	FreshStuff.Types[what1]=what2
	FreshStuff.SaveCt()
	SendTxt(user,env,Bot.name,"The category "..what1.." has successfully been changed.")
      end
    end
  else
    SendTxt(user,env,Bot.name,"Category should be added properly: +"..FreshStuff.Commands.AddCatgry.." <category_name> <displayed_name>")
  end
end

function FreshStuff.DelCatgry(user,data,env)
  local _,_,what=string.find(data,"%b<>%s+%S+%s+(%S+)")
  if what then
    if not FreshStuff.Types[what] then
      SendTxt(user,env,Bot.name,"The category "..what.." does not exist.")
    else
      FreshStuff.Types[what]=nil
      FreshStuff.SaveCt()
      SendTxt(user,env,Bot.name,"The category "..what.." has successfully been deleted.")
    end
  else
    SendTxt(user,env,Bot.name,"Category should be deleted properly: +"..FreshStuff.Commands.DelCatgry.." <category_name>")
  end
end

function FreshStuff.ShowCatgries(user,data,env)
  local msg="\r\n======================\r\nAvilable categories:\r\n======================\r\n"
  for a,b in FreshStuff.Types do
    msg=msg.."\r\n"..a
  end
  user:SendPM(Bot.name,msg)
end

function FreshStuff.SaveCt()
  local f=io.open("lawmaker/components/metafiles/fresh_categories.dat","w+")
  f:write("FreshStuff.Types={\n")
  for a,b in FreshStuff.Types do
    f:write("[\""..a.."\"]=\""..b.."\",\n")
  end
  f:write("}")
  f:close()
end

function FreshStuff.PruneRel(user,data,env)
  local _,_,days=string.find(data,"%b<>%s+%S+%s+(%d+)")
  days=days or FreshStuff.MaxItemAge
  local cnt=0
  local x=os.clock()
  SendToAll(Bot.name,"Release prune prodcess started, all releases older than "..days.." days will be deleted from the database.")
  local now=JulianDate(SplitTimeString(os.date("%m/%d/%Y".." 00:00:00")))
  local oldest=days*1440
  for i=FreshStuff.Count,1,-1 do
    local old=JulianDate(SplitTimeString(FreshStuff.AllStuff[i][3].." 00:00:00"))
    local diff=now-old
    local hours, mins= math.floor(diff) * 24 + math.floor(frac(diff) * 24), math.floor(frac(frac(diff)*24)*60)
    local tempus=hours*60+mins
    if tempus > oldest then
      FreshStuff.AllStuff[i]=nil
      cnt=cnt+1
    end
  end
  SendToAll(Bot.name,FreshStuff.Count.." items were parsed and "..cnt.." were removed.")
  if cnt ~=0 then
    FreshStuff.SaveRel()
    FreshStuff.ReloadRel()
  end
end

function FreshStuff.ShowTopAdders(user,data,env)
  local tmp,numtbl,msg={},{},"\r\nThe top "..FreshStuff.TopAddersCount.." release-addders are:\r\n"..string.rep("-",33).."\r\n"
  for a,b in FreshStuff.TopAdders do
    table.insert(numtbl,b)
    tmp[b] = tmp[b] or {}
    table.insert(tmp[b],a)
  end
  table.sort(numtbl)
  local e
  if table.getn(numtbl) <= FreshStuff.TopAddersCount then e=1 else e=table.getn(numtbl)-FreshStuff.TopAddersCount end
  for k=table.getn(numtbl),e,-1 do
    for n,c in tmp[numtbl[k]] do
      msg=msg..c..": "..numtbl[k].."\r\n"
    end
  end
  user:SendPM(Bot.name,msg)
end

function FreshStuff.OnTimer()
  if FreshStuff.Timer < 60 then
    FreshStuff.Timer=FreshStuff.Timer+1
  else
    if FreshStuff.WhenAndWhatToShow[os.date("%H:%M")] then
      if FreshStuff.Types[FreshStuff.WhenAndWhatToShow[os.date("%H:%M")]] then
        SendToAll(Bot.name, FreshStuff.ShowRelType(FreshStuff.WhenAndWhatToShow[os.date("%H:%M")]))
      else
        if FreshStuff.WhenAndWhatToShow[os.date("%H:%M")]=="new" then
          SendToAll(Bot.name, FreshStuff.MsgNew)
        elseif FreshStuff.WhenAndWhatToShow[os.date("%H:%M")]=="all" then
          SendToAll(Bot.name, FreshStuff.MsgAll)
        else
          SendToOps(Bot.name,"Some fool added something to my timed ad list that I never heard of. :-)")
        end
      end
    end
    FreshStuff.Timer=0
  end
end

RegCmd(FreshStuff.Commands.Add,FreshStuff.AddCrap,{},FreshStuff.Levels.Add,"<type> <name>\t\t\t\tAdd release of given type.")
RegCmd(FreshStuff.Commands.Show,FreshStuff.ShowCrap,{},FreshStuff.Levels.Show,"<type>\t\t\t\t\tShows the releases of the given type, with no type specified, shows all.")
RegCmd(FreshStuff.Commands.Delete,FreshStuff.DelCrap,{},FreshStuff.Levels.Delete,"<ID>\t\t\t\t\tDeletes the releases of the given ID, or deletes multiple ones if given like: 1,5,33,6789")
RegCmd(FreshStuff.Commands.ReLoad,FreshStuff.ReloadRel,{},FreshStuff.Levels.ReLoad,"\t\t\t\t\t\tReloads the releases database.")
RegCmd(FreshStuff.Commands.Search,FreshStuff.SearchRel,{},FreshStuff.Levels.Search,"<string>\t\t\t\t\tSearches for release NAMES containing the given string.")
RegCmd(FreshStuff.Commands.AddCatgry,FreshStuff.AddCatgry,{},FreshStuff.Levels.AddCatgry,"<new_cat> <displayed_name>\t\t\tAdds a new release category, displayed_name is shown when listed.")
RegCmd(FreshStuff.Commands.DelCatgry,FreshStuff.DelCatgry,{},FreshStuff.Levels.DelCatgry,"<cat>\t\t\t\t\tDeletes the given release category..")
RegCmd(FreshStuff.Commands.ShowCtgrs,FreshStuff.ShowCatgries,{},FreshStuff.Levels.ShowCtgrs,"\t\t\t\t\t\tShows the available release categories.")
RegCmd(FreshStuff.Commands.Prune,FreshStuff.PruneRel,{},FreshStuff.Levels.Prune,"<days>\t\t\t\t\tDeletes all releases older than n days, with no option, it deletes the ones older than "..FreshStuff.MaxItemAge.." days.")
RegCmd(FreshStuff.Commands.TopAdders,FreshStuff.ShowTopAdders,{},FreshStuff.Levels.TopAdders,"<number>\t\t\t\t\tShows the n top-release-adders (with no option, defaults to 5).")
RegFunc("main","loading freshstuff",FreshStuff.Main,{})
RegFunc("ont","freshstuff timed ad",FreshStuff.OnTimer,{})
RegFunc("nuc","announcing new releases",FreshStuff.NewUserConnected,{})
RegRC(FreshStuff.Levels.ShowCtgrs,"1 3","Releases\\Show categories","!"..FreshStuff.Commands.ShowCtgrs)
RegRC(FreshStuff.Levels.Delete,"1 3","Releases\\Delete a release","!"..FreshStuff.Commands.Delete.." %[line:ID number(s):]")
RegRC(FreshStuff.Levels.ReLoad,"1 3","Releases\\Reload releases database","!"..FreshStuff.Commands.ReLoad)
RegRC(FreshStuff.Levels.Search,"1 3","Releases\\Search among releases","!"..FreshStuff.Commands.Search.." %[line:Search string:]")
RegRC(FreshStuff.Levels.AddCatgry,"1 3","Releases\\Add a caetgory","!"..FreshStuff.Commands.AddCatgry.." %[line:Category name:] %[line:Displayed name:]")
RegRC(FreshStuff.Levels.DelCatgry,"1 3","Releases\\Delete a category","!"..FreshStuff.Commands.DelCatgry.." %[line:Category name:]")
RegRC(FreshStuff.Levels.Prune,"1 3","Releases\\Delete old releases","!"..FreshStuff.Commands.Prune.." %[line:Max. age in days (Enter=defaults to "..FreshStuff.MaxItemAge.."):]")
RegRC(FreshStuff.Levels.TopAdders,"1 3","Releases\\Show top release-adders","!"..FreshStuff.Commands.TopAdders.." %[line:Number of top-adders (Enter defaults to 5):]")