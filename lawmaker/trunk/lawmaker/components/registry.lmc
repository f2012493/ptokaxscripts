RegManagement={Levels={}}
--[[
Registering module for LawMaker by bastya_elvtars
Why separate commands for profiles? Well, ops can have right to add users, but not to add superops. :P
If no password is specified in pass changing or reguser adding, it will be autogenerated. (Thx to Herodes for idea.)
It is then a string  which is 4-12 characters long, and consists of letters and digits.
I think, however, it is not likely to be brute-forced. :P 
Commands having a password as parameter work only in PM session with the bot for security reasons.
CHPASS no longer has level. All registered users MUST be allowed to use this feature.
It also makes no sense to establish a level for REGME.
Superop status cannot be downgraded to, so that is NOT an option.
Registered User status cannot be upgraded to. There is registration, so this is NOT an option either.
]]

Run(path.."cfg/registry.ini")
RegManagement.BitchList=
	{
	  "in case you didn't know. :P",
	  "i recommend you a documentation on user profiles. :P",
	  "waste someone else's time.",
	  "go to the doctor... for a new brain. :P",
	  "better think before acting...",
	  "check out the key icon, it never lies... :)",
	  "are you really here, or...?",
	  "get a thermometer under your armpit... :)",
	  "the doctor is on the way, be patient. :P",
	  "please follow my finger with your eyes!",
	  "are you a real (wo)man, or a bot written by Microsucks?",
	  "try using your brain sometimes! :-P",
	  "artificial intelligence is being developed, but the template is not you. :P"
	}

if RegManagement.AllowSelfReg~=1 then RegManagement.AllowSelfReg=0 end

function RegManagement.GeneratePass()
  local passarr={} -- create an array
  -- generated password is 4-12 characters, so we make a loop consisting of a randomly chosen number of this range
  for a=1,math.random(4,12) do 
    local x=string.char(math.random(97,122)) -- random number, range is letters' ASCII codes
    local y=string.char(math.random(49,57)) -- random number, range is digits' ASCII codes
    local z=string.char(math.random(65,90))   
    local tmp2={x,y,z} -- adding the resulting 2 characters to an array
    table.insert(passarr,tmp2[math.random(3)]) -- and we randomly choose one element from the array and insert to the other
  end
  -- and we make a string out of the characters in the array (cool new feature of lua5)
  return table.concat(passarr)
end

function RegManagement.Do(user,data,env,neededlevel)
  local tmp={[0]="Superoperator",[1]="Operator",[2]="VIP",[3]="Registered User"}
  local cat=tmp[neededlevel]
  local userarray={}
  for _,obj in frmHub:GetRegisteredUsers() do
    if obj.iProfile==neededlevel then
      table.insert(userarray,obj.sNick)
    end
  end
  local mess="\r\r\nHere you are, the "..cat.."s :\r\n\r\n===============================\r\n\r\n"
  if table.getn(userarray)==0 then
    mess=mess.."List empty.\r\n"
  else
    table.sort(userarray)
    for i=1,table.getn(userarray) do
      if not GetItemByName(userarray[i]) then
	mess=mess..userarray[i].."\r\n"
      else
	mess=mess..userarray[i].." ===> ONLINE\r\n"
      end
    end
  end
  mess=mess.."\r\n===============================\r\n"
  user:SendPM(Bot.name,mess)
  userarray=nil
  Clear()
end

function RegManagement.Register(user,data,env,level,bool)
  if env=="PM" then
    local _,_,nick = string.find(data,"%b<>%s+%S+%s+(%S+)")
    local _,_,pass = string.find(data,"%b<>%s+%S+%s+(%S+)%s+(%S+)")
    pass=pass or RegManagement.GeneratePass()
    local regusers={}
    for _,obj in frmHub:GetRegisteredUsers() do
      regusers[obj.sNick]=obj.iProfile
    end
    local tmp={[0]="Superoperator",[1]="Operator",[2]="VIP",[3]="Registered User"}
    if bool then
      if not user.bRegistered then
        local passwd=nick
	if passwd then -- local passwd=nick or RegManagement.GeneratePass()
          if string.len(passwd)<4 or string.find(passwd,"([^A-Za-z0-9]+)") then
            SendTxt(user,env,Bot.name,"Your password is too short, or contains non-alphanumeric characters!")
            return 1
          end
        else
          psswd=RegManagement.GeneratePass()
        end
        AddRegUser(user.sName,passwd,3)
	SendTxt(user,env,Bot.name,"You are registered now, with password: "..passwd..". "..mrg)
      else
	SendTxt(user,env,Bot.name,"You are already a(n) "..tmp[user.iProfile]..", "..RegManagement.BitchList[math.random(table.getn(RegManagement.BitchList))])
      end
    else
      if nick then
	if not regusers[nick] then
          local mrg,rpl="",nil
          pass,rpl=string.gsub(nick,"([^A-Za-z0-9]+])","")
	  if string.len(pass)<4 or string.find(pass,"([^A-Za-z0-9]+)") then
	    SendTxt(user,env,Bot.name,"Password must be at least 4 characters long, it should only contain alphanumeric characters!")
	    return 1
	  end
	  AddRegUser(nick,pass,level)
	  SendTxt(user,env,Bot.name,"You have made "..nick.." a(n) "..tmp[level].." with password: "..pass..". "..mrg)
	  SendPmToNick(nick,Bot.name,user.sName.." has made you a "..tmp[level]..". Your password is: "..pass)
	else
	  SendTxt(user,env,Bot.name,nick.." is alredy a(n) "..tmp[level]..", "..RegManagement.BitchList[math.random(table.getn(RegManagement.BitchList))])
	end
      else
	SendTxt(user,env,Bot.name,"Please specify a nick to register!")
      end
    end
    regusers=nil; Clear()
  else
    user:SendPM(Bot.name,"This command works only in PM for security reasons. Please try again in this window. :)")
  end
end

function RegManagement.Unregister(user,data,env,level)
  local _,_,nick = string.find(data,"%b<>%s+%S+%s+(%S+)")
  local tmp={[0]="Superoperator",[1]="Operator",[2]="VIP",[3]="Registered User"}
  local regusers={}
  for _,obj in frmHub:GetRegisteredUsers() do
    regusers[obj.sNick]=obj.iProfile
  end
  if nick then
    if regusers[nick] then
      if regusers[nick]==level then
	DelRegUser(nick,pass,level)
	SendTxt(user,env,Bot.name,"You have unregistered the following "..tmp[level]..": "..nick.." .")
	SendPmToNick(nick,Bot.name,user.sName.." has revoked your "..tmp[level].." status, you are now unregistered.")
      else
	SendTxt(user,env,Bot.name,nick.." is a(n) "..tmp[level]..", "..RegManagement.BitchList[math.random(table.getn(RegManagement.BitchList))])
      end
    else
      SendTxt(user,env,Bot.name,nick.." is an unregistered user.")
    end
  else
    SendTxt(user,env,Bot.name,"Please specify a nick to unregister!")
  end
  regusers=nil; Clear()
end

function RegManagement.ChangePass(user,data,env)
  if not user.bRegistered then
    SendTxt(user,env,Bot.name,"You aren't registered, why change your password?") return 1
  else
    if env=="PM" then
      local _,_,pass = string.find(data,"%b<>%s+%S+%s+(%S+)")
      pass=pass or RegManagement.GeneratePass()
      AddRegUser(user.sName, pass, user.iProfile)
      SendTxt(user,env,Bot.name,"Your password has been changed to: "..pass)
    else
      user:SendPM(Bot.name,"This command works only in PM for security reasons. Please try again in this window. :)")
    end
  end
end

function RegManagement.UpDownGrade(user,data,env,level,bool)
  local _,_,nick=string.find(data,"%b<>%s+%S+%s+(%S+)")
  if nick then
    if frmHub:isNickRegged(nick) then
      local regusers={}
      for _,obj in frmHub:GetRegisteredUsers() do
	regusers[obj.sNick]=obj.iProfile
      end
      local tmp={[0]="Superoperator",[1]="Operator",[2]="VIP",[3]="Registered User"} -- Of course unregs cannot be upgraded, there is registering for this.
      if bool then -- downgrade
	if userlevels[regusers[nick]] > userlevels[level] then
	  AddRegUser(nick, frmHub:GetUserPassword(nick), level)
	  SendPmToNick(nick,Bot.name,user.sName.." has downgraded your profile to "..tmp[level]..".")
	  SendTxt(user,env,Bot.name,"You have upgraded "..nick.."'s profile to: "..tmp[level]..".")
	else
	  SendTxt(user,env,Bot.name,nick.." is alredy a(n) "..tmp[level]..", "..RegManagement.BitchList[math.random(table.getn(RegManagement.BitchList))])
	end
      else -- upgrade
	if userlevels[regusers[nick]] < userlevels[level] then
	  AddRegUser(nick, frmHub:GetUserPassword(nick), level)
	  SendPmToNick(nick,Bot.name,user.sName.." has upgraded your profile to "..tmp[level]..".")
	  SendTxt(user,env,Bot.name,"You have upgraded "..nick.."'s profile to: "..tmp[level]..".")
	else
	  SendTxt(user,env,Bot.name,nick.." is alredy a(n) "..tmp[level]..", "..RegManagement.BitchList[math.random(table.getn(RegManagement.BitchList))])
	end
      end
      regusers=nil; Clear()
    else
      SendTxt(user,env,Bot.name,nick.." was NOT found among the registered users. Only registered users can be upgraded.")
    end
  else
    SendTxt(user,env,Bot.name,"Please specify a nick to change status of!")
  end
end

function RegManagement.GetPass(user,data,env)
  local _,_,nick=string.find(data,"%b<>%s+%S+%s+(%S+)")
  if nick then
    if frmHub:isNickRegged(nick) then
      SendTxt(user,env,Bot.name,nick.." is registered with password "..frmHub:GetUserPassword(nick))
    else
      SendTxt(user,env,Bot.name,nick.." was NOT found among the registered users.")
    end
  else
    SendTxt(user,env,Bot.name,"Please specify a nick to get the password for!")
  end
end

RegCmd("showops",RegManagement.Do,{1},RegManagement.Levels.Ops,"\t\t\t\t\t\tShows all operators.")
RegCmd("showsuperops",RegManagement.Do,{0},RegManagement.Levels.SuperOps,"\t\t\t\t\t\tShows all superoperators.")
RegCmd("showregs",RegManagement.Do,{3},RegManagement.Levels.Regs,"\t\t\t\t\t\tShows all registered users.")
RegCmd("showvips",RegManagement.Do,{2},RegManagement.Levels.Vips,"\t\t\t\t\t\tShows all VIPs.")
RegCmd("addop",RegManagement.Register,{1},RegManagement.Levels.AddOp,"<username> <password>\t\t\tAdds a new operator. If you do not specify the password, I will generate one.")
RegCmd("addsuperop",RegManagement.Register,{0},RegManagement.Levels.AddSuperOp,"<username> <password>\t\t\tAdds a new superoperator. If you do not specify the password, I will generate one.")
RegCmd("addreg",RegManagement.Register,{3},RegManagement.Levels.AddReg,"<username> <password>\t\t\tAdds a new registered user. If you do not specify the password, I will generate one.")
RegCmd("addvip",RegManagement.Register,{2},RegManagement.Levels.AddVip,"<username> <password>\t\t\tAdds a new VIP. If you do not specify the password, I will generate one.")
RegCmd("deletevip",RegManagement.Unregister,{1},RegManagement.Levels.DeleteVip,"<username> <password>\t\t\Deletes a VIP. If you do not specify the password, I will generate one.")
RegCmd("deletesuperop",RegManagement.Unregister,{0},RegManagement.Levels.DeleteSuperOp,"<username> <password>\t\t\Deletes a superop.")
RegCmd("deletereg",RegManagement.Unregister,{3},RegManagement.Levels.DeleteReg,"<username> <password>\t\t\Deletes a registered user.")
RegCmd("deleteop",RegManagement.Unregister,{2},RegManagement.Levels.DeleteOp,"<username> <password>\t\t\Deletes a superop.")
RegCmd("chpass",RegManagement.ChangePass,{},2,"<new_password>\t\t\t\tChanges your password. If you do not specify the password, I will generate one.")
RegCmd("regme",RegManagement.Register,{3,true,},RegManagement.AllowSelfReg,"<username> <password>\t\t\t\tAdd yourself as registered user. If you don't specify the nick, your current one will be used. If you do not specify the password, I will generate one.")
RegCmd("upgradetoop",RegManagement.UpDownGrade,{1,false},RegManagement.Levels.UpGradeToOp,"<username>\t\t\t\tUpgrade a user to Op.")
RegCmd("upgradetosuperop",RegManagement.UpDownGrade,{0,false},RegManagement.Levels.UpGradeToSuperOp,"<username>\t\t\t\tUpgrade a user to Superop.")
RegCmd("upgradetovip",RegManagement.UpDownGrade,{2,false},RegManagement.Levels.UpGradeToVip,"<username>\t\t\t\tUpgrade a user to VIP.")
RegCmd("downgradetoop",RegManagement.UpDownGrade,{1,true},RegManagement.Levels.DownGradeToOp,"<username>\t\t\t\tDowngrade a Superop to Op.")
RegCmd("downgradetovip",RegManagement.UpDownGrade,{2,true},RegManagement.Levels.DownGradeToVip,"<username>\t\t\t\tDowngrade a (Super)op to VIP.")
RegCmd("downgradetoreg",RegManagement.UpDownGrade,{3,true},RegManagement.Levels.DownGradeToReg,"<username>\t\t\t\tDowngrade a Vip or (Super)op to Reg.")
RegCmd("getpass",RegManagement.GetPass,{},RegManagement.Levels.GetPass,"<nick>\t\t\t\tretrieves nick's password.")
RegRC(RegManagement.Levels.AddOp,"1 3","Registry\\Add a new\\Op","!addop %[line:Nick:] %[line:Password (Enter to auto-generate):]",true)
RegRC(RegManagement.Levels.AddSuperOp,"1 3","Registry\\Add a new\\SuperOP","!addsuperop %[line:Nick:] %[line:Password (Enter to auto-generate):]",true)
RegRC(RegManagement.Levels.AddReg,"1 3","Registry\\Add a new\\RegUser","!addreg %[line:Nick:] %[line:Password (Enter to auto-generate):]",true)
RegRC(RegManagement.Levels.AddVip,"1 3","Registry\\Add a new\\VIP","!addvip %[line:Nick:] %[line:Password (Enter to auto-generate):]",true)
RegRC(RegManagement.Levels.DeleteOp,"1 3","Registry\\Delete a(n)\\Op","!deleteop %[line:Nick:]")
RegRC(RegManagement.Levels.DeleteSuperOp,"1 3","Registry\\Delete a(n)\\SuperOP","!deletesuperop %[line:Nick:]")
RegRC(RegManagement.Levels.DeleteReg,"1 3","Registry\\Delete a(n)\\RegUser","!deletereg %[line:Nick:]")
RegRC(RegManagement.Levels.DeleteVip,"1 3","Registry\\Delete a(n)\\VIP","!deletevip %[line:Nick:]")
RegRC(RegManagement.Levels.UpGradeToOp,"1 2","Registry\\Upgrade USER to\\OP","!upgradetoop %[nick]")
RegRC(RegManagement.Levels.UpGradeToVip,"1 2","Registry\\Upgrade USER to\\VIP","!upgradetovip %[nick]")
RegRC(RegManagement.Levels.UpGradeToSuperOp,"1 2","Registry\\Upgrade USER to\\SuperOP","!upgradetosuperop %[nick]")
RegRC(RegManagement.Levels.UpGradeToOp,"1 3","Registry\\Upgrade a user to\\OP...","!upgradetoop %[line:Nick:]")
RegRC(RegManagement.Levels.UpGradeToVip,"1 3","Registry\\Upgrade a user to\\VIP...","!upgradetovip %[line:Nick:]")
RegRC(RegManagement.Levels.UpGradeToSuperOp,"1 3","Registry\\Upgrade a user to\\SuperOP...","!upgradetosuperop %[line:Nick:]")
RegRC(RegManagement.Levels.DownGradeToOp,"1 2","Registry\\Downgrade USER to\\OP","!downgradetoop %[nick]")
RegRC(RegManagement.Levels.DownGradeToVip,"1 2","Registry\\Downgrade USER to\\VIP","!downgradetovip %[nick]")
RegRC(RegManagement.Levels.DownGradeToReg,"1 2","Registry\\Downgrade USER to\\RegUser","!downgradetoreg %[nick]")
RegRC(RegManagement.Levels.DownGradeToOp,"1 3","Registry\\Downgrade a user to\\OP...","!downgradetoop %[line:Nick:]")
RegRC(RegManagement.Levels.DownGradeToVip,"1 3","Registry\\Downgrade a user to\\VIP...","!downgradetovip %[line:Nick:]")
RegRC(RegManagement.Levels.DownGradeToReg,"1 3","Registry\\Downgrade a user to\\RegUser...","!downgradetoreg %[line:Nick:]")
RegRC(2,"1 3","Registry\\Change your own password","!chpass %[line:New password (Enter to auto-generate):]",true)
RegRC(RegManagement.AllowSelfReg,"1 3","Registry\\Add yourself as registered user","!regme %[line:Password (Enter to auto-generate):]",true)
RegRC(RegManagement.Levels.GetPass,"1 3","Registry\\Get password for a user...","!getpass %[line:Nick:]")
RegRC(RegManagement.Levels.Ops,"1 3","Registry\\Show\\Operators","!showops")
RegRC(RegManagement.Levels.SuperOps,"1 3","Registry\\Show\\Superoperators","!showsuperops")
RegRC(RegManagement.Levels.Regs,"1 3","Registry\\Show\\Registered users","!showregs")
RegRC(RegManagement.Levels.Vips,"1 3","Registry\\Show\\VIPs","!showvips")
